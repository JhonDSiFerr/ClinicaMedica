package br.com.sistemaclinica.view;

import br.com.sistemaclinica.dao.PerfilDAO;
import br.com.sistemaclinica.model.Perfil;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Alisson Dias
 */
public class TelaCadastroPerfil extends javax.swing.JFrame {
    
    
     private int idPerfilSelecionado = 0; // <<-- ADICIONE ESTA LINHA
    
     
     
    private List<Perfil> listaDePerfis;
    
    private void carregarTabela() {
    // 1. Cria uma instância do DAO.
    PerfilDAO dao = new PerfilDAO();
    
    // 2. Chama o método para buscar todos os perfis e guarda na variável da classe.
    this.listaDePerfis = dao.listarTodos();

    // 3. Pega o modelo da nossa tabela.
    DefaultTableModel modeloTabela = (DefaultTableModel) tblPerfis.getModel();
    
    // 4. Limpa a tabela para evitar dados duplicados ao recarregar.
    modeloTabela.setRowCount(0);

    // 5. Define o nome das colunas da tabela.
    modeloTabela.setColumnIdentifiers(new Object[]{"ID", "Nome do Perfil"});

    // 6. Percorre a lista de perfis e adiciona cada um como uma nova linha na tabela.
    for (Perfil p : this.listaDePerfis) {
        modeloTabela.addRow(new Object[]{
            p.getId(),
            p.getNome()
        });
    }
}
    
    
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(TelaCadastroPerfil.class.getName());

    private void tblPerfisValueChanged(javax.swing.event.ListSelectionEvent evt) {                                       
    // Garante que o código só rode quando a seleção do usuário estiver finalizada.
    if (!evt.getValueIsAdjusting() && tblPerfis.getSelectedRow() != -1) {
        
        int linhaSelecionada = tblPerfis.getSelectedRow();
        
        // Pega o objeto Perfil inteiro da nossa lista, com base na linha clicada.
        Perfil perfilSelecionado = this.listaDePerfis.get(linhaSelecionada);
        
        // Guarda o ID do perfil selecionado para usar nas ações de Salvar/Deletar.
        this.idPerfilSelecionado = perfilSelecionado.getId();

        // Preenche o campo de nome do perfil.
        txtNomePerfil.setText(perfilSelecionado.getNome());

        // --- PREENCHENDO TODAS AS CAIXAS DE PERMISSÃO ---

        // Permissões de Funcionário
        chkCadastrarFuncionario.setSelected(perfilSelecionado.isCadastrarFuncionario());
        chkLerFuncionario.setSelected(perfilSelecionado.isLerFuncionario());
        chkEditarFuncionario.setSelected(perfilSelecionado.isAtualizarFuncionario());
        chkApagarFuncionario.setSelected(perfilSelecionado.isDeletarFuncionario());
        chkLerFuncionario.setSelected(perfilSelecionado.isListarFuncionario());

        // Permissões de Paciente
        chkCadastrarPaciente.setSelected(perfilSelecionado.isCadastrarPaciente());
        chkLerPaciente.setSelected(perfilSelecionado.isLerPaciente());
        chkEditarPaciente.setSelected(perfilSelecionado.isAtualizarPaciente());
        chkApagarPaciente.setSelected(perfilSelecionado.isDeletarPaciente());
        chkLerPaciente.setSelected(perfilSelecionado.isListarPaciente());

        // Permissões de Consulta
        chkCadastrarConsulta.setSelected(perfilSelecionado.isCadastrarConsulta());
        chkLerConsulta.setSelected(perfilSelecionado.isLerConsulta());
        chkEditarConsulta.setSelected(perfilSelecionado.isAtualizarConsulta());
        chkApagarConsulta.setSelected(perfilSelecionado.isDeletarConsulta());
        chkLerConsulta.setSelected(perfilSelecionado.isListarConsulta());
        
        // Habilita os botões de Deletar e etc., se necessário.
        btnDeletar.setEnabled(true); 
    } else {
        // Opcional: Desabilita botões se nenhuma linha estiver selecionada
        btnDeletar.setEnabled(false);
    }
}
    
    
    
    /**
     * Creates new form TelaCadastroPerfil
     */
    public TelaCadastroPerfil() {
        initComponents();
        carregarTabela();
       tblPerfis.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      
        
            
        @Override
        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            // Este método é chamado toda vez que a seleção muda.
            // Dentro dele, nós simplesmente chamamos o nosso outro método que faz o trabalho pesado.
            tblPerfisValueChanged(evt);
        
               } 
        });
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtNomePerfil = new javax.swing.JTextField();
        btnNovo = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnDeletar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPerfis = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        chkLerFuncionario = new javax.swing.JCheckBox();
        chkApagarFuncionario = new javax.swing.JCheckBox();
        chkEditarFuncionario = new javax.swing.JCheckBox();
        chkCadastrarPaciente = new javax.swing.JCheckBox();
        chkEditarPaciente = new javax.swing.JCheckBox();
        chkCadastrarFuncionario = new javax.swing.JCheckBox();
        chkApagarPaciente = new javax.swing.JCheckBox();
        chkLerPaciente = new javax.swing.JCheckBox();
        chkLerConsulta = new javax.swing.JCheckBox();
        chkEditarConsulta = new javax.swing.JCheckBox();
        chkApagarConsulta = new javax.swing.JCheckBox();
        chkCadastrarConsulta = new javax.swing.JCheckBox();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nome do Perfil :");

        btnNovo.setText("Limpar Campos");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnDeletar.setBackground(new java.awt.Color(255, 0, 0));
        btnDeletar.setText("Deletar");

        tblPerfis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPerfis);

        jLabel2.setText("Funcionarios");

        jLabel3.setText("Pacientes");

        jLabel4.setText("Consultas");

        chkLerFuncionario.setText("Ler Funcionario");
        chkLerFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLerFuncionarioActionPerformed(evt);
            }
        });

        chkApagarFuncionario.setText("Apagar Funcionario");

        chkEditarFuncionario.setText("EditarFuncionario");

        chkCadastrarPaciente.setText("Cadastrar Paciente");
        chkCadastrarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCadastrarPacienteActionPerformed(evt);
            }
        });

        chkEditarPaciente.setText("Editar Paciente");

        chkCadastrarFuncionario.setText("Cadastrar Funcionario");
        chkCadastrarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCadastrarFuncionarioActionPerformed(evt);
            }
        });

        chkApagarPaciente.setText("Apagar Paciente");

        chkLerPaciente.setText("Ler Paciente");
        chkLerPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLerPacienteActionPerformed(evt);
            }
        });

        chkLerConsulta.setText("Ler Consulta");
        chkLerConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLerConsultaActionPerformed(evt);
            }
        });

        chkEditarConsulta.setText("Editar Consulta");

        chkApagarConsulta.setText("Apagar Consulta");

        chkCadastrarConsulta.setText("Cadastrar Consulta");
        chkCadastrarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCadastrarConsultaActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(433, 433, 433)
                        .addComponent(btnDeletar)
                        .addGap(18, 18, 18)
                        .addComponent(btnSalvar)
                        .addGap(18, 18, 18)
                        .addComponent(btnNovo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkLerConsulta)
                            .addComponent(chkLerPaciente)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNomePerfil, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(chkEditarFuncionario)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(178, 178, 178)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkApagarConsulta)
                                            .addComponent(chkCadastrarPaciente)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(chkApagarFuncionario, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(chkApagarPaciente))
                                            .addComponent(chkCadastrarFuncionario)
                                            .addComponent(chkCadastrarConsulta)))
                                    .addComponent(chkEditarPaciente)
                                    .addComponent(chkLerFuncionario)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chkEditarConsulta))
                                .addGap(39, 39, 39)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNomePerfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(43, 43, 43)
                        .addComponent(jLabel2)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkApagarFuncionario, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chkEditarFuncionario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkLerFuncionario)
                            .addComponent(chkCadastrarFuncionario))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkEditarPaciente)
                            .addComponent(chkApagarPaciente)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkLerPaciente)
                    .addComponent(chkCadastrarPaciente))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeletar)
                    .addComponent(btnSalvar)
                    .addComponent(jLabel4)
                    .addComponent(btnNovo)
                    .addComponent(btnCancelar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkEditarConsulta)
                    .addComponent(chkApagarConsulta))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkLerConsulta)
                    .addComponent(chkCadastrarConsulta))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkLerFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLerFuncionarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkLerFuncionarioActionPerformed

    private void chkCadastrarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCadastrarPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkCadastrarPacienteActionPerformed

    private void chkCadastrarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCadastrarFuncionarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkCadastrarFuncionarioActionPerformed

    private void chkLerPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLerPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkLerPacienteActionPerformed

    private void chkLerConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLerConsultaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkLerConsultaActionPerformed

    private void chkCadastrarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCadastrarConsultaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkCadastrarConsultaActionPerformed

    private void limparCampos() {
    // Limpa o campo de texto
    txtNomePerfil.setText("");

    // Desmarca todos os checkboxes
    chkCadastrarFuncionario.setSelected(false);
    chkLerFuncionario.setSelected(false);
    chkEditarFuncionario.setSelected(false);
    chkApagarFuncionario.setSelected(false);
    chkLerFuncionario.setSelected(false);
    chkCadastrarPaciente.setSelected(false);
    chkLerPaciente.setSelected(false);
    chkEditarPaciente.setSelected(false);
    chkApagarPaciente.setSelected(false);
    chkLerPaciente.setSelected(false);
    chkCadastrarConsulta.setSelected(false);
    chkLerConsulta.setSelected(false);
    chkEditarConsulta.setSelected(false);
    chkApagarConsulta.setSelected(false);
    chkLerConsulta.setSelected(false);

    // Reseta o ID selecionado e a seleção da tabela
    this.idPerfilSelecionado = 0;
    tblPerfis.clearSelection();
}
    
    
    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
// 1. Coleta todos os dados da tela e monta o objeto Perfil.
    Perfil perfil = new Perfil();
    perfil.setNome(txtNomePerfil.getText());

    // Permissões de Funcionário
    perfil.setCadastrarFuncionario(chkCadastrarFuncionario.isSelected());
    perfil.setLerFuncionario(chkLerFuncionario.isSelected());
    perfil.setAtualizarFuncionario(chkEditarFuncionario.isSelected());
    perfil.setDeletarFuncionario(chkApagarFuncionario.isSelected());
    perfil.setListarFuncionario(chkLerFuncionario.isSelected());

    // Permissões de Paciente
    perfil.setCadastrarPaciente(chkCadastrarPaciente.isSelected());
    perfil.setLerPaciente(chkLerPaciente.isSelected());
    perfil.setAtualizarPaciente(chkEditarPaciente.isSelected());
    perfil.setDeletarPaciente(chkApagarPaciente.isSelected());
    perfil.setListarPaciente(chkLerPaciente.isSelected());

    // Permissões de Consulta
    perfil.setCadastrarConsulta(chkCadastrarConsulta.isSelected());
    perfil.setLerConsulta(chkLerConsulta.isSelected());
    perfil.setAtualizarConsulta(chkEditarConsulta.isSelected());
    perfil.setDeletarConsulta(chkApagarConsulta.isSelected());
    perfil.setListarConsulta(chkLerConsulta.isSelected());
    
    // 2. Lógica para decidir entre INSERIR (cadastrar) ou ATUALIZAR.
    try {
        PerfilDAO dao = new PerfilDAO();

        // Se o ID é 0, significa que nenhum perfil foi selecionado, então é um NOVO cadastro.
        if (idPerfilSelecionado == 0) {
            dao.cadastrar(perfil);
            javax.swing.JOptionPane.showMessageDialog(this, "Perfil cadastrado com sucesso!", "Sucesso", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } 
        // Se o ID é diferente de 0, significa que um perfil foi selecionado, então é uma ATUALIZAÇÃO.
        else {
            perfil.setId(idPerfilSelecionado); // Define o ID no objeto para o DAO saber quem atualizar.
            dao.atualizar(perfil);
            javax.swing.JOptionPane.showMessageDialog(this, "Perfil atualizado com sucesso!", "Sucesso", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }

        // 3. Limpa o formulário e recarrega a tabela para exibir os dados atualizados.
        limparCampos();
        carregarTabela(); // Assumindo que você tem um método para carregar a tabela de perfis.

    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Erro ao salvar perfil:\n" + e.getMessage(), "Erro no Banco de Dados", javax.swing.JOptionPane.ERROR_MESSAGE);
    } 

    // TODO add your handling code here:
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed

    limparCampos();
       // TODO add your handling code here:
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
  // Este comando fecha a janela ATUAL e libera seus recursos da memória,
    // revelando a tela que estava por baixo (a TelaPrincipal).
    this.dispose();   // TODO add your handling code here:        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new TelaCadastroPerfil().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JCheckBox chkApagarConsulta;
    private javax.swing.JCheckBox chkApagarFuncionario;
    private javax.swing.JCheckBox chkApagarPaciente;
    private javax.swing.JCheckBox chkCadastrarConsulta;
    private javax.swing.JCheckBox chkCadastrarFuncionario;
    private javax.swing.JCheckBox chkCadastrarPaciente;
    private javax.swing.JCheckBox chkEditarConsulta;
    private javax.swing.JCheckBox chkEditarFuncionario;
    private javax.swing.JCheckBox chkEditarPaciente;
    private javax.swing.JCheckBox chkLerConsulta;
    private javax.swing.JCheckBox chkLerFuncionario;
    private javax.swing.JCheckBox chkLerPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPerfis;
    private javax.swing.JTextField txtNomePerfil;
    // End of variables declaration//GEN-END:variables
}
