/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.sistemaclinica.view;

import br.com.sistemaclinica.dao.ConsultaDAO;
import br.com.sistemaclinica.dao.EspecialidadeDAO;
import br.com.sistemaclinica.dao.FuncionarioDAO;
import br.com.sistemaclinica.dao.PacienteDAO;
import br.com.sistemaclinica.model.Consulta;
import br.com.sistemaclinica.model.Especialidade;
import br.com.sistemaclinica.model.Funcionario;
import br.com.sistemaclinica.model.Paciente;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alisson Dias
 */
public class TelaAgendamentoConsulta extends javax.swing.JFrame {
    
    private void tblConsultasValueChanged(javax.swing.event.ListSelectionEvent evt) {
    if (!evt.getValueIsAdjusting() && tblConsultas.getSelectedRow() != -1) {
        idConsultaSelecionada = Integer.parseInt(tblConsultas.getValueAt(tblConsultas.getSelectedRow(), 0).toString());
    }
}
    
    private int idConsultaSelecionada = 0;
    
    private void carregarEspecialidades() {
    EspecialidadeDAO dao = new EspecialidadeDAO();
    List<Especialidade> lista = dao.listarTodos();
    cmbEspecialidade.removeAllItems();

    // Adiciona um item inicial "Selecione..."
    cmbEspecialidade.addItem(null); 

    for (Especialidade e : lista) {
        cmbEspecialidade.addItem(e);
    }
}
    
    
    private void carregarTabelaConsultas() {
    // 1. Chama o DAO para obter a lista de consultas.
    ConsultaDAO dao = new ConsultaDAO();
    List<Consulta> listaConsultas = dao.listarTodas();

    // 2. Pega o modelo da nossa tabela.
    DefaultTableModel modeloTabela = (DefaultTableModel) tblConsultas.getModel();
    
    // 3. Limpa a tabela para evitar dados duplicados ao recarregar.
    modeloTabela.setRowCount(0);

    // 4. Define o nome das colunas da tabela.
    modeloTabela.setColumnIdentifiers(new Object[]{"ID", "Data/Hora", "Paciente", "Médico", "Sintomas"});

    // 5. Prepara um formatador para exibir a data e hora de forma amigável.
    DateTimeFormatter formatador = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

    // 6. Percorre a lista de consultas e adiciona cada uma como uma nova linha na tabela.
    for (Consulta c : listaConsultas) {
        
        // Formata a data e hora para o nosso padrão.
        String dataFormatada = c.getDataHorario().format(formatador);
        
        // Adiciona a linha com os dados formatados.
        // Note como pegamos o nome do paciente e do médico de dentro do objeto consulta.
        modeloTabela.addRow(new Object[]{
            c.getId(),
            dataFormatada,
            c.getPaciente().getNome(),
            c.getMedico().getNome(),
            c.getSintomas()
        });
    }
}
   
    
private void carregarPacientes() {
    PacienteDAO dao = new PacienteDAO();
    List<Paciente> lista = dao.listarTodos();

    cmbPaciente.removeAllItems(); // Limpa a caixa de seleção

    for (Paciente p : lista) {
        cmbPaciente.addItem(p); // Adiciona o objeto Paciente inteiro
    }
}
private void carregarMedicos(int especialidadeId) {
    FuncionarioDAO dao = new FuncionarioDAO();
    // Agora passamos o ID para o método do DAO, que fará o filtro no SQL.
    List<Funcionario> lista = dao.listarMedicosPorEspecialidade(especialidadeId);

    cmbMedico.removeAllItems(); // Limpa a caixa de seleção

    for (Funcionario f : lista) {
        cmbMedico.addItem(f); // Adiciona o objeto Funcionario inteiro
    }
}
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(TelaAgendamentoConsulta.class.getName());

    /**
     * Creates new form TelaAgendamentoConsulta
     */
    public TelaAgendamentoConsulta() {
        initComponents();
        carregarEspecialidades();
        carregarPacientes();
        carregarTabelaConsultas();
       
        
        
          tblConsultas.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {

        @Override
        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            // Este método é chamado toda vez que a seleção muda.
            // Dentro dele, nós simplesmente chamamos o nosso outro método que faz o trabalho pesado.
            tblConsultasValueChanged(evt);
        }
          });

                  }  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbPaciente = new javax.swing.JComboBox();
        cmbMedico = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        txtDataHora = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaSintomas = new javax.swing.JTextArea();
        chkERetorno = new javax.swing.JCheckBox();
        btnSalvarAgendamento = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblConsultas = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnCancelarConsulta = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cmbEspecialidade = new javax.swing.JComboBox();
        btnButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Paciente:");

        jLabel2.setText("Data e hora:");

        jLabel4.setText("Sintomas:");

        cmbPaciente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbMedico.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Médico:");

        txaSintomas.setColumns(20);
        txaSintomas.setRows(5);
        jScrollPane1.setViewportView(txaSintomas);

        chkERetorno.setText("Retorno?");

        btnSalvarAgendamento.setText("Salvar");
        btnSalvarAgendamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarAgendamentoActionPerformed(evt);
            }
        });

        tblConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblConsultas);

        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Formato: dia/mês/ano hr:mm");

        btnCancelarConsulta.setBackground(new java.awt.Color(255, 51, 51));
        btnCancelarConsulta.setText("Cancelar Consulta");
        btnCancelarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarConsultaActionPerformed(evt);
            }
        });

        jLabel6.setText("Especialidade:");

        cmbEspecialidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbEspecialidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEspecialidadeActionPerformed(evt);
            }
        });

        btnButton.setText("Cancelar");
        btnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(chkERetorno))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDataHora, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbEspecialidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnSalvarAgendamento)
                        .addGap(32, 32, 32)
                        .addComponent(btnCancelarConsulta)
                        .addGap(34, 34, 34)
                        .addComponent(btnButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkERetorno)
                            .addComponent(jLabel5)
                            .addComponent(cmbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbEspecialidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDataHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvarAgendamento)
                    .addComponent(btnCancelarConsulta)
                    .addComponent(btnButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarAgendamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarAgendamentoActionPerformed
// --- 1. COLETA E VALIDAÇÃO DOS DADOS DA TELA ---
    
    // Pega os OBJETOS INTEIROS que estão selecionados nas caixas de seleção.
    Paciente pacienteSelecionado = (Paciente) cmbPaciente.getSelectedItem();
    Funcionario medicoSelecionado = (Funcionario) cmbMedico.getSelectedItem();
    Especialidade especialidadeSelecionada = (Especialidade) cmbEspecialidade.getSelectedItem();
    
    // Validações para garantir que os itens foram selecionados
    if (pacienteSelecionado == null) {
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, selecione um paciente.", "Erro de Validação", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }
    if (especialidadeSelecionada == null) {
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, selecione uma especialidade.", "Erro de Validação", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }
    if (medicoSelecionado == null) {
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, selecione um médico.", "Erro de Validação", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Pega os dados dos outros campos
    String sintomas = txaSintomas.getText();
    boolean eRetorno = chkERetorno.isSelected();
    LocalDateTime dataHora;

    // Bloco para conversão e validação da Data/Hora
    try {
        String dataHoraTexto = txtDataHora.getText();
        if (dataHoraTexto.trim().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "O campo Data e Hora é obrigatório.", "Erro de Validação", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        DateTimeFormatter formatador = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        dataHora = LocalDateTime.parse(dataHoraTexto, formatador);
    } catch (DateTimeParseException e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Formato de Data e Hora inválido!\nUse dd/MM/yyyy HH:mm (ex: 25/12/2025 14:30).", "Erro de Formato", javax.swing.JOptionPane.ERROR_MESSAGE);
        return; 
    }

    // --- 2. MONTAGEM DO OBJETO CONSULTA ---
    Consulta novaConsulta = new Consulta();
    novaConsulta.setPaciente(pacienteSelecionado);
    novaConsulta.setMedico(medicoSelecionado);
    novaConsulta.setEspecialidade(especialidadeSelecionada);
    novaConsulta.setDataHorario(dataHora);
    novaConsulta.setSintomas(sintomas);
    novaConsulta.seteRetorno(eRetorno);

    // --- 3. CHAMADA AO DAO PARA SALVAR NO BANCO ---
    try {
        ConsultaDAO dao = new ConsultaDAO();
        dao.cadastrar(novaConsulta);

        javax.swing.JOptionPane.showMessageDialog(this, "Consulta agendada com sucesso!", "Sucesso", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        
        // Limpa os campos e atualiza a tabela
        txaSintomas.setText("");
        chkERetorno.setSelected(false);
        txtDataHora.setText("");
        carregarTabelaConsultas();

    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Erro ao agendar consulta:\n" + e.getMessage(), "Erro no Banco de Dados", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnSalvarAgendamentoActionPerformed

    private void btnCancelarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarConsultaActionPerformed
  // Verifica se uma consulta foi selecionada na tabela
    if (idConsultaSelecionada == 0) {
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, selecione na tabela a consulta que deseja cancelar.", "Nenhuma consulta selecionada", javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Pede confirmação ao usuário
    int resposta = javax.swing.JOptionPane.showConfirmDialog(this, "Tem certeza que deseja cancelar esta consulta?", "Confirmação de Cancelamento", javax.swing.JOptionPane.YES_NO_OPTION);

    if (resposta == javax.swing.JOptionPane.YES_OPTION) {
        try {
            // Chama o DAO para deletar a consulta
            ConsultaDAO dao = new ConsultaDAO();
            dao.deletar(idConsultaSelecionada);

            javax.swing.JOptionPane.showMessageDialog(this, "Consulta cancelada com sucesso!", "Sucesso", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            // Zera o ID e recarrega a tabela para mostrar o resultado
            idConsultaSelecionada = 0;
            carregarTabelaConsultas();

        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Erro ao cancelar consulta:\n" + e.getMessage(), "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }  
   // TODO add your handling code here:

    }//GEN-LAST:event_btnCancelarConsultaActionPerformed

    private void cmbEspecialidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEspecialidadeActionPerformed
 // Pega o objeto Especialidade que foi selecionado.
    Especialidade especialidadeSelecionada = (Especialidade) cmbEspecialidade.getSelectedItem();

    // Se o usuário selecionou uma especialidade válida...
    if (especialidadeSelecionada != null) {
        // ...AQUI ESTÁ A MUDANÇA:
        // Em vez de repetir toda a lógica aqui, nós simplesmente chamamos
        // nosso método auxiliar, passando o ID da especialidade.
        carregarMedicos(especialidadeSelecionada.getId());
        
    } else {
        // Se o usuário selecionou o item nulo ("Selecione..."), 
        // a única ação necessária é limpar a lista de médicos.
        cmbMedico.removeAllItems();
    }

    }//GEN-LAST:event_cmbEspecialidadeActionPerformed

    private void btnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnButtonActionPerformed
  // Este comando fecha a janela ATUAL e libera seus recursos da memória,
    // revelando a tela que estava por baixo (a TelaPrincipal).
    this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btnButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new TelaAgendamentoConsulta().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnButton;
    private javax.swing.JButton btnCancelarConsulta;
    private javax.swing.JButton btnSalvarAgendamento;
    private javax.swing.JCheckBox chkERetorno;
    private javax.swing.JComboBox cmbEspecialidade;
    private javax.swing.JComboBox cmbMedico;
    private javax.swing.JComboBox cmbPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblConsultas;
    private javax.swing.JTextArea txaSintomas;
    private javax.swing.JTextField txtDataHora;
    // End of variables declaration//GEN-END:variables
}
